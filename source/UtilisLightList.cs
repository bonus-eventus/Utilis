//
//  LightsList.cs
//
//  Author:Bonus Eventus
//
//  Contact: fortuneetbono@gmail.com
//
//  Copyright (c) 2018 Bonus Eventus
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
namespace Utilis
{
	public class UtilisLightList 
	{


		public UtilisLightList( List<Light> list )
		{
			if(list.Count >=1 || list != null)
			{
				Lights = new List<UtilisLight>();
				int count = list.Count;
				while(count-- >0)
				{
					UtilisLight uLight = new UtilisLight(list[count]);
					Lights.Add(uLight);
				}
			}else{
				throw new Exception("ERROR: UtilisLightList constructor has been passed an empty List<Light> on initialization. List.Count must be greater than >= 1.");
			}
		}
		//fields

		private List<UtilisLight> Lights;

		private bool _state = true;

		public bool State
		{
			get
			{
				return _state;
			}
		}

		public int Count
		{
			get {return Lights.Count;}
		}

		//methods

		private void SetEnable(UtilisLight uLight)
		{
			uLight.Enable();
		}

		private void SetDisable(UtilisLight uLight)
		{
			uLight.Disable();
		}

		public void Enable()
		{
			Lights.ForEach(SetEnable);

		}

		public void Disable()
		{
			Lights.ForEach(SetDisable);
		}

		public void SetProp(Color color)
		{
			
			int count = Lights.Count;
			
			while (count-- > 0)
			{
				Lights[count].SetColor(color);
			}
		}

		public void SetProp(Vector3 props)
		{
			float intensity = props.x;
			float range = props.y;
			float spotAngle = props.z;

			int count = Lights.Count;
			
			while (count-- > 0)
			{
				if(intensity == 0)intensity = Lights[count].Light.intensity;

				if(range == 0)range = Lights[count].Light.range;

				if(spotAngle == 0)spotAngle = Lights[count].Light.spotAngle;

				Lights[count].SetIntensity (Mathf.Clamp( (Lights[count].orgIntensity * intensity), 0f, 8f ));
				
				Lights[count].SetRange (Mathf.Clamp((Lights[count].orgRange * range), 0f, 1000000f));
				
				if(Lights[count].Light.type == LightType.Spot)Lights[count].SetSpotAngle (Mathf.Clamp((Lights[count].orgSpotAngle * spotAngle), 1f, 179f));
			}
		}

		public void SetProp(Vector3 props, Color color)
		{
			float intensity = props.x;
			float range = props.y;
			float spotAngle = props.z;

			int count = Lights.Count;
			
			while (count-- > 0)
			{
				if(intensity == 0)intensity = Lights[count].Light.intensity;
				
				if(range == 0)range = Lights[count].Light.range;
				
				if(spotAngle == 0)spotAngle = Lights[count].Light.spotAngle;
				
				Lights[count].SetIntensity (Mathf.Clamp( (Lights[count].orgIntensity * intensity), 0f, 8f ));
				
				Lights[count].SetRange (Mathf.Clamp((Lights[count].orgRange * range), 0f, 1000000f));
				
				if(Lights[count].Light.type == LightType.Spot)Lights[count].SetSpotAngle (Mathf.Clamp((Lights[count].orgSpotAngle * spotAngle), 1f, 179f));

				Lights[count].SetColor (color);
			}
		}



		public void Add(UtilisLight uLight)
		{
			Lights.Add(uLight);
		}

		public void Add(Light light)
		{
			UtilisLight uLight = new UtilisLight(light);
			Lights.Add(uLight);
		}
	}
}

