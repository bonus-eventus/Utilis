//
//  ModuleColorSelect.cs
//
//  Author:Bonus Eventus
//
//  Contact: fortuneetbono@gmail.com
//
//  Copyright (c) 2018 Bonus Eventus
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
namespace Utilis
{
	public class ModuleSelectColor : PartModule
	{
		//
		//ksp fields
		//
		[KSPField]
		public string moduleID = "ModuleSelectColor";

		[KSPField (isPersistant = true, guiActive = false, guiActiveEditor = false, guiName = "Red"), UI_FloatRange (minValue = 0f, maxValue = 1f, stepIncrement = 0.05f)]
		public float Red = 1f;
		
		[KSPField (isPersistant = true, guiActive = false, guiActiveEditor = false, guiName = "Green"), UI_FloatRange (minValue = 0f, maxValue = 1f, stepIncrement = 0.05f)]
		public float Green = 1f;

		[KSPField (isPersistant = true, guiActive = false, guiActiveEditor = false, guiName = "Blue"), UI_FloatRange (minValue = 0f, maxValue = 1f, stepIncrement = 0.05f)]
		public float Blue = 1f;

		[KSPField (isPersistant = true, guiActive = false, guiActiveEditor = false, guiName = "Hue"), UI_FloatRange (minValue = 0f, maxValue = 1f, stepIncrement = 0.05f)]
		public float Hue = 0f;

		[KSPField (isPersistant = true, guiActive = false, guiActiveEditor = false, guiName = "Sat"), UI_FloatRange (minValue = 0f, maxValue = 1f, stepIncrement = 0.05f)]
		public float Saturation = 100f;

		[KSPField (isPersistant = true, guiActive = false, guiActiveEditor = false, guiName = "Val"), UI_FloatRange (minValue = 0f, maxValue = 1f, stepIncrement = 0.05f)]
		public float Value = 100f;

		[KSPField]
		public bool colorTweakable = true;

		[KSPField]
		public bool hueTweakable = false;

		[KSPField]
		public bool saturationTweakable = false;

		[KSPField]
		public bool valueTweakable = false;

		public int Index;

		private Color _rgb()
		{
			Color c = new Color(Red,Green,Blue);
			ColorHSV hsv = new ColorHSV(c);
			Hue = hsv.h;
			Saturation = hsv.s;
			Value = hsv.v;
			return c;
		}

		private Color _hsv()
		{
			Color c = new ColorHSV(Hue,Saturation,Value).ToColor();
			Red = c.r;
			Green = c.g;
			Blue = c.b;
			return c;
		}

		public Color Color = Color.white;

		private void setupFields(BaseField field, bool state)
		{
			field.guiActiveEditor = state;
			UI_FloatRange range = (UI_FloatRange)field.uiControlEditor;
			range.affectSymCounterparts = UI_Scene.All;
			range.onFieldChanged = onFieldChange;
			Debug.Log ("[ModuleColorSelect] "+field.name+" setup complete");
		}

		public delegate void OnColorChange(Color c, bool ignoreColor);
		
		private OnColorChange onColorChange;
		
		public void Add(OnColorChange method)
		{
			onColorChange += method;
		}
		
		public void Remove(OnColorChange method)
		{
			onColorChange -= method;
		}

		private void onFieldChange(BaseField field, object oldValueObj)
		{
			if(field.name == "Red" || field.name == "Green" || field.name == "Blue")
			{
				Color = _rgb();
			}else{
				Color = _hsv();
			}
			if(onColorChange != null)
			{
				onColorChange(Color, false);
				int count = part.symmetryCounterparts.Count;
				
				if(count > 0 || part.symmetryCounterparts != null)
				{
					while(count-- >0)
					{
						Part p = part.symmetryCounterparts[count];
						
						if(part != p) p.Modules.GetModule<ModuleSelectColor> (0).onColorChange(Color, false);
					}
				}
			}
		}
		public override void OnStart (StartState state)
		{
			base.OnStart (state);
			if(state == StartState.Editor)
			{
				Debug.Log ("[ModuleColorSelect] BaseFields begin setup");

				setupFields(base.Fields["Red"],colorTweakable);

				setupFields(base.Fields["Green"],colorTweakable);

				setupFields(base.Fields["Blue"],colorTweakable);

				setupFields(base.Fields["Hue"],hueTweakable);

				setupFields(base.Fields["Saturation"],saturationTweakable);

				setupFields(base.Fields["Value"],valueTweakable);

				Debug.Log ("[ModuleColorSelect] BaseFields setup finished");
			}
			Debug.Log ("[ModuleColorSelect] OnStart finished");
		}
	}
}

