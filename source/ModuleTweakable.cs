//
//  ModuleTweakableRotation.cs
//
//  Author:Bonus Eventus
//
//  Contact: fortuneetbono@gmail.com
//
//  Copyright (c) 2018 Bonus Eventus
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
namespace Utilis
{
	public class ModuleTweakable : PartModule
	{
		[KSPField]
		public string moduleID = "ModuleTweakable";

		[KSPField (isPersistant = true, guiActive = false, guiActiveEditor = false, guiName = "Tweakable"), UI_FloatRange (minValue = 0f, maxValue = 1f, stepIncrement = 0.05f)]
		public float T = 0f;

		[KSPField]
		public float min = 0f;

		[KSPField]
		public float max = 1f;

		[KSPField]
		public float step = 0.005f;

		[KSPField]
		public FloatCurve curve = new FloatCurve();

		public float Evaluate(float t)
		{
			return curve.Evaluate(t);
		}

		public delegate void OnTweakChange(float field);
		
		private OnTweakChange onTweakChange;
		
		public void Add(OnTweakChange method)
		{
			onTweakChange += method;
		}
		
		public void Remove(OnTweakChange method)
		{
			onTweakChange -= method;
		}


		private void onFieldChange(BaseField field, object oldValueObj)
		{
			if(onTweakChange != null)onTweakChange(Evaluate (T));

		}

		public override void OnLoad (ConfigNode node)
		{
			base.OnLoad (node);

		}

		private void setupFields(BaseField field, bool state)
		{
			field.guiActiveEditor = state;
			UI_FloatRange range = (UI_FloatRange)field.uiControlEditor;
			range.minValue = min;
			range.maxValue = max;
			range.stepIncrement = step;
			range.affectSymCounterparts = UI_Scene.All;
			range.onFieldChanged = onFieldChange;
			Debug.Log ("[ModuleTweakable] "+field.name+" setup complete");
		}

		public override void OnStart (StartState state)
		{
			base.OnStart (state);
			setupFields(base.Fields["T"],true);
			Debug.Log ("[ModuleTweakable] OnStart finished");
		}
	}
}

