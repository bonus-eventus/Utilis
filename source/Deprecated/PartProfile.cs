//
//  PartProfile.cs
//
//  Author:Bonus Eventus
//
//  Contact: fortuneetbono@gmail.com
//
//  Copyright (c) 2018 Bonus Eventus
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Utilis
{
	public class PartProfile
	{
		public PartProfile(Part part)
		{
			this.id = Guid.NewGuid().ToString();
			if(part != null)
			{
				this.part = part;
			}else{
				Debug.Log("[PartProfile][id="+this.id+"] constructor argument 'part' is null.");
			}
			
		}
		
		public bool switchResources = false;

		public bool switchIVA = false;

		public bool switchMesh = false;

		public bool isDefault = false;

		//active state of the profile
		private bool _active = false;

		//PartResource ConfigNode list
		public List<ConfigNode> resourceList = new List<ConfigNode>();

		//this profile's part
		public Part part;

		//names of the transforms for this profile's model
		public List<string> modelNames = new List<string>();

		//names of the transforms for this profile's internal model
		public List<string> internalTransformNames = new List<string>();

		//transforms for this profile's model
		public List<Transform> modelTransforms = new List<Transform>();

		public string id; 

		//this profile's dragcube
		public List<DragCube> dragcube = new List<DragCube>();

		//this profile's mass
		public float mass = 0;

		//this profile's cost
		public int cost = 0;

		public string desc;

		//
		//methods
		//

		public void Enable(ModuleSwitchablePart m)
		{
			//activate profile model objects
			_active = true;

			int count = modelTransforms.Count;

			for(int i=0;i<count;i++)
			{
				modelTransforms[i].gameObject.SetActive(true);
			}

			int count_1 = resourceList.Count;

			//remove current resources
			part.Resources.Clear();

			//add new resources
			for(int i=0;i<count_1;i++)
			{
				part.AddResource(resourceList[i]);
			}

			if(mass != 0)
			{
				part.mass = mass;
			}else{
			}

			if(cost != 0)
			{
				part.partInfo.cost = cost;
			}else{
			}

			if(desc != string.Empty)
			{
				part.partInfo.description = desc;
			}else{

			}

			if(dragcube != null)
			{
				part.DragCubes.ClearCubes();
				part.DragCubes.Cubes.Add(dragcube[0]);
				part.DragCubes.ResetCubeWeights();
			}else{
			}




		}

		public void Disable()
		{
			//deactivate profile model objects
			_active = false;

			int count = modelTransforms.Count;
			
			for(int i=0;i<count;i++)
			{
				modelTransforms[i].gameObject.SetActive(false);
			}
		}

		public void Load(ConfigNode node)
		{

		}
	}
}

