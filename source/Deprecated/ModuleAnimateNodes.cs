// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
namespace Utilis
{
	public class ModuleAnimateNodes : PartModule
	{
		public ModuleAnimateNodes ()
		{
		}

		[KSPEvent(guiName="Move",active=true,guiActive=true,guiActiveEditor=true)]
		public void Move()
		{
			if(!toggleMove)
			{
				moveNode("plus");
				base.Events["Move"].guiName = "Reset";
			}
			else
			{
				moveNode("minus");
				base.Events["Move"].guiName = "Move";
			}
			toggleMove = !toggleMove;
		}

		[KSPAction("Toggle Move",KSPActionGroup.REPLACEWITHDEFAULT)]
		public void ToggleMove(KSPActionParam param)
		{
			Move ();
		}

		[KSPField]
		public string node_0;

		[KSPField]
		public string node_1;

		[KSPField]
		public string url;

		[KSPField (isPersistant=true)]
		public bool toggleMove = false;

		public float distance = 0.1f;

		public Vector3 v;

		public Part p_0;

		public Part p_1;
		
		public Vector3 p_0pos;

		public Vector3 p_1pos;

		public Part part_0;

		public Part part_1;

		public bool init = true;

		public override void OnStart (StartState state)
		{
			base.OnStart (state);
			p_0 = part.FindAttachNode(node_0).attachedPart;
			p_1 = part.FindAttachNode(node_1).attachedPart;
			v = new Vector3(0,distance,0);

		}

		public override void OnSave (ConfigNode node)
		{
			base.OnSave (node);
			Debug.Log("OnSave called");
			ConfigNode partNode = PartLoader.getPartInfoByName("testHub").partConfig;
			Debug.Log("Adding values to partNode");
			string setValue_0 = KSPUtil.WriteVector(part.FindAttachNode(node_0).position)+", "+KSPUtil.WriteVector(part.FindAttachNode(node_0).orientation)+", 1";
			string setValue_1 = KSPUtil.WriteVector(part.FindAttachNode(node_1).position)+", "+KSPUtil.WriteVector(part.FindAttachNode(node_1).orientation)+", 1";
			if( partNode.HasValue("node_stack_"+node_0))
			{
				partNode.SetValue ("node_stack_"+node_0, setValue_0);
			}
			if( partNode.HasValue("node_stack_"+node_1))
			{
				partNode.SetValue ("node_stack_"+node_1, setValue_1);
			}
			ShipConstruction.GetSavePath(vessel.name);
			Debug.Log("OnSave end");
		}

		public void moveNode(string choice)
		{
			p_0pos = p_0.attachJoint.Joint.anchor;
			p_1pos = p_1.attachJoint.Joint.anchor;
			if(choice == "plus")
			{

				p_0.SetCollisionIgnores();
				p_1.SetCollisionIgnores();

				Vector3 temp_0 = p_0pos + v;
				Vector3 temp_1 = p_1pos + v;

				p_0.attachJoint.Joint.anchor = temp_0;
				p_1.attachJoint.Joint.anchor = temp_1;

				part.FindAttachNode(node_0).position = part.FindAttachNode(node_0).position + v;
				part.FindAttachNode(node_1).position = part.FindAttachNode(node_1).position - v;

				Debug.Log (KSPUtil.WriteVector(p_0.FindAttachNodeByPart(part).position));

				p_0.ResetCollisionIgnores();
				p_1.ResetCollisionIgnores();
			}
			if(choice == "minus")
			{
				p_0.SetCollisionIgnores();
				p_1.SetCollisionIgnores();
				
				Vector3 temp_0 = p_0pos - v;
				Vector3 temp_1 = p_1pos - v;
				
				p_0.attachJoint.Joint.anchor = temp_0;
				p_1.attachJoint.Joint.anchor = temp_1;

				part.FindAttachNode(node_0).position = part.FindAttachNode(node_0).position - v;
				part.FindAttachNode(node_1).position = part.FindAttachNode(node_1).position + v;
				
				p_0.ResetCollisionIgnores();
				p_1.ResetCollisionIgnores();
			}
		}

	}
}

